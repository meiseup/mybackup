[Apache commons系列]DBUtils简介一 
收藏人：喵喵酱的图书馆  
2014-08-20 | 阅：11  转：0    
   |  分享
　　inkfish原创，请勿商业性质转载，转载请注明来源（http://blog.csdn.net/inkfish ）。 

　　一言蔽之，DbUtils就是让开发人员更方便的使用JDBC的工具类库，它不是任何一种框架或数据库。 

　　DbUtils作用有仨：
 　　　　1.丢一个SQL，给一个结果；
 　　　　2.把结果包装成Bean、Map、List或Object[]形式；
 　　　　3.关闭Connection、Statement、ResultSet时候无需写try catch，一行关闭。 

　　审视下面一段代码有何缺点： 
[java] view plaincopy

1.Connection conn = null;  
2.Statement stmt = null;  
3.ResultSet rs = null;  
4.try {  
5.    …………  
6.} catch (SQLException ex) {  
7.    ex.printStackTrace();  
8.} finally {  
9.    try {  
10.        rs.close();  
11.        stmt.close();  
12.        conn.close();  
13.    } catch (SQLException ex) {  
14.        ex.printStackTrace();  
15.    }  
16.}  


　　在这段代码中，如果rs.close()或stmt.close()出现SQLException，则会导致连接泄露，这是初学者常犯的毛病，正确的写法应该是： 
[java] view plaincopy

1.Connection conn = null;  
2.Statement stmt = null;  
3.ResultSet rs = null;  
4.try {  
5.    …………  
6.} catch (SQLException ex) {  
7.    ex.printStackTrace();  
8.} finally {  
9.    try {  
10.        rs.close();  
11.    } catch (SQLException ex) {  
12.    }  
13.    try {  
14.        stmt.close();  
15.    } catch (SQLException ex) {  
16.    }  
17.    try {  
18.        conn.close();  
19.    } catch (SQLException ex) {  
20.    }  
21.}  


　　显然这里代码过多，而如果最初级的使用DbUtils的效果就是： 
[java] view plaincopy

1.Connection conn = null;  
2.Statement stmt = null;  
3.ResultSet rs = null;  
4.try {  
5.    …………  
6.} catch (SQLException ex) {  
7.    ex.printStackTrace();  
8.} finally {  
9.    DbUtils.closeQuietly(conn, stmt, rs);  
10.}  


　　显然少了很多代码。 

　　强烈建议用到纯JDBC的项目使用该类库，而其他比如用到iBatis、Hibernate、JPA的项目可以绕道而行。什么样的项目会用到JDBC？
 　　　　1.通常初学者用JDBC比较多，只是初学者为了打实基础，练习阶段少用框架和帮助类库；
 　　　　2.小型项目，小型项目不需要太多的数据库操作，不需要考虑跨数据库兼容问题，用框架并不会让编码更简单；
 　　　　3.需要高效率的项目，无论iBatis、Hibernate，到了底下还是JDBC，直接用JDBC访问数据库无疑是最优的效率最高的方案。



　　2009年11月04日，DbUtils 1.3正式发布，与1.2相比，主要的变化的是对Java 1.5泛型和可变数组的支持，也就是说DbUtils 1.3必须运行于Java 1.5或更新的环境。


以下部分由官方网页翻译而来，官方主页地址：http://commons.apache.org/dbutils/index.html

Commons DbUtils: JDBC工具组件综述 

　　DbUtils是一个小型的类库，它设计用于使JDBC编程更加方便、简单。JDBC编程中，资源的关闭是显式的，极易导致编程错误，DbUtils把这些清理工作抽象出来，使得程序员编程时仅需要关心真正需要关心的，即：query和update数据。

DbUtils的一些优点： 

　　1.杜绝资源泄漏。修正JDBC代码并不困难，但是这是耗时而乏味的，这通常导致连接泄露并且难以跟踪到；
 　　2.清洁干净的持久化代码。大段的持久化数据到数据库代码彻底精简，剩下的代码清晰地表达了编码的意图。
 　　3.从ResultSet里自动组装JavaBean。你不再需要手工set每一行每一列的值到bean中，每一行数据都将会以一个Bean实例的形式出现。

DbUtils设计用于： 

　　1.Small - 你应该在短时间内理解所有的包的用途；
 　　2.Transparent - DbUtils在幕后并不做任何复杂的看似奇妙的工作，仅仅是你给一个查询，他去执行并且清理资源；
 　　3.Fast - 你并不需要n多个临时对象给DbUtils。

DbUtils并不是： 

　　1.一个对象/关系的桥梁 - 现在已经有很多优秀的O/R工具，DbUtils只是给决定用纯JDBC的开发场景使用的；
 　　2.数据访问对象（DAO）框架 - 虽然DbUtils能被用在DAO框架之中；
 　　3.一个面向对象的抽象的数据库对象，比如表、列或是主键；
 　　4.任何一种轻量级的框架 - DbUtils的目标仅是让程序员直接而方便的使用JDBC的帮助类库。

依赖 

　　DbUtils以一个独立的Jar包形式发布，仅仅依赖不低于1.5版本的Java。  

来自：喵喵酱的图书馆 > 《DButils》  
 

[Apache commons系列]DBUtils简介二 
 


收藏人：喵喵酱的图书馆  
2014-08-20 | 阅：13  转：0    
 |   来源 
   |  分享  
　　inkfish原创，请勿商业性质转载，转载请注明来源（http://blog.csdn.net/inkfish ）。

　　DbUtils是一个小型的类库，不需要也不值得花太长的时间去熟悉每一个类。DbUtils核心其实只有三个类/接口，即QueryRunner 、ResultSetHandler 和DbUtls （官方文档中写的是前两个）。 

 

一．下面先过一下DbUtils的几个包（package）： 

1.org.apache.commons.dbutils  
　　提供核心类/接口，提供最常用最通用的功能。 

2.org.apache.commons.dbutils.handlers  
　　提供对ResultSet 的各种形式的包装，所有类都实现了ResultSetHandler ，因此也可以看做是ResultSetHandler 的延伸。其功能比如把ResultSet 中每一行变成一个JavaBean或一个数组等。 

3.org.apache.commons.dbutils.wrappers  
　　提供对ResultSet 中的值的包装过滤，所有类都实现了java.lang.reflect.InvocationHandler 。其功能比如将ResultSet 中所有String 值进行trim() 操作，或是把所有null值赋一个有意义的新值。 

 

二．下面是对DbUtils各类的使用进行介绍： 

1.org.apache.commons.dbutils.DbUtils  
　　DbUtils类是一个工具类，里面所有方法都是静态的，因此无需实例化即可调用，通过API介绍即可了解其功能： 
close ：关闭Connection 、Statement 或ResultSet ，忽略null；
closeQuietly ：安静的关闭Connection 、Statement 或ResultSet ，它会尽力去关闭，忽略null和SQLException ；
commitAndClose ：提交并关闭Connection ，忽略null；
commitAndCloseQuietly ：提交并关闭Connection ，忽略null和SQLException ；
loadDriver ：和Class.forName().newInstance() 功能一样，但它能捕获异常，并返回true 或false ；
printStackTrace ：打印SQLException 的详细错误信息；
printWarnings ：打印Connection 的警告信息；
rollback ：回滚操作，忽略null；
rollbackAndClose ：回滚操作并关闭，忽略null；
rollbackAndCloseQuietly ：回滚操作并关闭，忽略null、SQLException 。

2.org.apache.commons.dbutils.QueryRunner  
batch ：执行成批的INSERT、UPDATE、DELETE操作；
fillStatement ：用Object[] 或JavaBean的值填充PreparedStatement 中的占位符；
query ：执行查询操作（Statement 或PreparedStatement 均可），并用ResultSetHandler 来处理ResultSet ；
update ：执行INSERT或UPDATE操作（Statement 或PreparedStatement 均可）。

3.org.apache.commons.dbutils.ResultSetHandler  
　　所有在DbUtils里提供的的ResultSetHandler 实现都是线程安全的
ArrayHandler ：把ResultSet 第一行包装成Object[] ；
ArrayListHandler ：把ResultSet包装成List<Object[]> ； 
BeanHandler ：把ResultSet 第一行包装成一个JavaBean；
BeanListHandler ：把ResultSet 第一行包装成一个List<JavaBean> ；
ColumnListHandler ：抽取ResultSet 指定的列，以List<Object> 对象的形式返回，默认第一列；
KeyedHandler ：包装ResultSet ，以Map<Object,Map<String,Object>> 对象形式返回，第一个Object 是指定的列值，第二个Map 中String 是列名；
MapHandler ：把ResultSet 第一行包装成Map<String, Object> ；
MapListHandler ：把ResultSet包装成List<Map<String,Object>> ； 
ScalarHandler ：抽取ResultSet 第一行指定列，以Object 对象形式返回。

4.org.apache.commons.dbutils.wrappers.SqlNullCheckedResultSet  
　　对ResultSet 中的null值进行处理。

5.org.apache.commons.dbutils.wrappers.StringTrimmedResultSet  
　　对ResultSet 中的String 进行trim() 处理。 
 


 
 
 
 

来自：喵喵酱的图书馆 > 《DButils》  
 

[Apache commons系列]DBUtils简介三 
 


收藏人：喵喵酱的图书馆  


  

 



2014-08-20 | 阅：216  转：1

    
 |   来源 

















 
 
 
 
   |  分享  



 
 

 
 

 
 

 
 

 
 

 
 

 

 

 

 

  















   
 
 
 
 



 


　　inkfish原创，请勿商业性质转载，转载请注明来源（http://blog.csdn.net/inkfish ）。

　　DbUtils是一个小型的类库，这里通过具体实例来说明如何使用DbUtils。示例分为3个类：DbUtilsExample演示了如何使用DbUtils 类；QueryRunnerExample 演示了如何使用QueryRunner 、ResultSetHandler ；User 类为一个JavaBean，对应于数据库中的表格。示例采用MySQL为数据库，使用JDBC4.0驱动（最大的区别就是不需要写Class.forName().newInstance() ）。 

依赖包： 
commons-dbcp-1.2.2.jar：提供数据库连接池
commons-dbutils-1.3.jar：DbUtils包
commons-lang-2.4.jar：提供常用的工具方法
commons-pool-1.5.3.jar：提供DBCP对象池化机制
mysql-connector-java-5.1.10-bin.jar：MySQL JDBC4.0驱动

建表语句： 




[java] view plaincopy

1.DROP TABLE IF EXISTS `user`;  
2.CREATE TABLE  `user` (  
3.  `USERNAME` varchar(30) NOT NULL,  
4.  `PASSWORDHASH` varchar(256),  
5.  PRIMARY KEY (`USERNAME`),  
6.  KEY `USERNAME` (`USERNAME`)  
7.);  


DbUtilsExample.java ： 




[java] view plaincopy

1.import java.sql.Connection;  
2.import java.sql.DriverManager;  
3.import java.sql.PreparedStatement;  
4.import java.sql.ResultSet;  
5.import java.sql.SQLException;  
6.import java.sql.Statement;  
7.import org.apache.commons.dbutils.DbUtils;  
8.public class DbUtilsExample {  
9.    public static void main(String[] args) {  
10.        String url = "jdbc:mysql://127.0.0.1:3306/test";  
11.        String user = "test";  
12.        String password = "test";  
13.        Connection conn = null;  
14.        Statement stmt = null;  
15.        ResultSet rs = null;  
16.        try {  
17.            conn = DriverManager.getConnection(url, user, password);  
18.            stmt = conn.createStatement();  
19.            stmt  
20.                    .executeUpdate("INSERT INTO user (USERNAME, PASSWORDHASH) values ('testUser', '123456')");  
21.            DbUtils.closeQuietly(stmt);  
22.            DbUtils.commitAndCloseQuietly(conn);  
23.        } catch (SQLException ex) {  
24.            DbUtils.printStackTrace(ex);  
25.            DbUtils.rollbackAndCloseQuietly(conn);  
26.        }  
27.        PreparedStatement psmt = null;  
28.        try {  
29.            conn = DriverManager.getConnection(url, user, password);  
30.            psmt = conn.prepareStatement("SELECT USERNAME, PASSWORDHASH FROM user");  
31.            rs = psmt.executeQuery();  
32.            while (rs.next()) {  
33.                System.out.println(rs.getString(1) + "/t" + rs.getString(2));  
34.            }  
35.        } catch (SQLException ex) {  
36.            DbUtils.printStackTrace(ex);  
37.        } finally {  
38.            DbUtils.closeQuietly(conn, psmt, rs);  
39.        }  
40.        try {  
41.            conn = DriverManager.getConnection(url, user, password);  
42.            stmt = conn.createStatement();  
43.            stmt.executeUpdate("DELETE FROM user WHERE USERNAME='testUser'");  
44.            DbUtils.closeQuietly(stmt);  
45.        } catch (SQLException ex) {  
46.            DbUtils.printStackTrace(ex);  
47.        } finally {  
48.            DbUtils.printWarnings(conn);  
49.            DbUtils.closeQuietly(conn);  
50.        }  
51.    }  
52.}  


QueryRunnerExample.java ： 




[java] view plaincopy

1.import static java.lang.System.out;  
2.import java.sql.Connection;  
3.import java.sql.PreparedStatement;  
4.import java.sql.SQLException;  
5.import java.util.Arrays;  
6.import java.util.List;  
7.import java.util.Map;  
8.import javax.sql.DataSource;  
9.import org.apache.commons.dbcp.BasicDataSource;  
10.import org.apache.commons.dbutils.DbUtils;  
11.import org.apache.commons.dbutils.QueryRunner;  
12.import org.apache.commons.dbutils.handlers.ArrayHandler;  
13.import org.apache.commons.dbutils.handlers.ArrayListHandler;  
14.import org.apache.commons.dbutils.handlers.BeanHandler;  
15.import org.apache.commons.dbutils.handlers.BeanListHandler;  
16.import org.apache.commons.dbutils.handlers.ColumnListHandler;  
17.import org.apache.commons.dbutils.handlers.KeyedHandler;  
18.import org.apache.commons.dbutils.handlers.MapHandler;  
19.import org.apache.commons.dbutils.handlers.MapListHandler;  
20.import org.apache.commons.dbutils.handlers.ScalarHandler;  
21.import org.apache.commons.lang.StringUtils;  
22.public class QueryRunnerExample {  
23.    public static void main(String[] args) throws SQLException {  
24.        QueryRunnerExample example = new QueryRunnerExample();  
25.        example.batch();  
26.        example.fillStatement();  
27.        example.query();  
28.        example.update();  
29.        example.closeDataSource();  
30.    }  
31.    private DataSource dataSource = null;  
32.    private QueryRunner runner = null;  
33.    public QueryRunnerExample() {  
34.        initDataSource();  
35.        runner = new QueryRunner(dataSource);  
36.    }  
37.    private void batch() {  
38.        String sql = "INSERT INTO user (USERNAME, PASSWORDHASH) values (?, ?)";  
39.        try {  
40.            out.println("/n" + StringUtils.center("Test QueryRunner batch", 80, '*'));  
41.            int[] result = runner.batch(sql, new Object[][] { { "user1", "pwd1" },  
42.                    { "user2", "pwd2" }, { "user3", "pwd3" }, { "user4", "pwd4" } });  
43.            out.printf("运行结果：%s/n", Arrays.toString(result));  
44.        } catch (SQLException ex) {  
45.            DbUtils.printStackTrace(ex);  
46.        }  
47.    }  
48.    private void closeDataSource() throws SQLException {  
49.        ((BasicDataSource) dataSource).close();  
50.    }  
51.    private void fillStatement() throws SQLException {  
52.        String sql = "INSERT INTO user (USERNAME, PASSWORDHASH) VALUES (?, ?)";  
53.        Connection conn = null;  
54.        try {  
55.            out.println("/n" + StringUtils.center("Test QueryRunner fillStatement", 80, '*'));  
56.            conn = dataSource.getConnection();  
57.            PreparedStatement psmt = conn.prepareStatement(sql);  
58.            runner.fillStatementWithBean(psmt, new User("testUser5", "pwd5"), "userName",  
59.                    "passwordHash");  
60.            out.println(psmt.executeUpdate());  
61.        } catch (SQLException ex) {  
62.            DbUtils.printStackTrace(ex);  
63.        } finally {  
64.            DbUtils.commitAndCloseQuietly(conn);  
65.        }  
66.    }  
67.    private DataSource initDataSource() {  
68.        if (dataSource == null) {  
69.            BasicDataSource basicDs = new BasicDataSource();  
70.            basicDs.setUrl("jdbc:mysql://127.0.0.1:3306/test");  
71.            basicDs.setUsername("test");  
72.            basicDs.setPassword("test");  
73.            this.dataSource = basicDs;  
74.        }  
75.        return dataSource;  
76.    }  
77.    private void query() throws SQLException {  
78.        out.println("/n" + StringUtils.center("Test QueryRunner query", 80, '*'));  
79.        String sql = "SELECT * FROM user WHERE USERNAME LIKE ?";  
80.        out.println("1.Test QueryRunner query, ArrayHandler");  
81.        //把ResultSet第一行包装成Object[]  
82.        Object[] r1 = runner.query(sql, new ArrayHandler(), "user%");  
83.        out.println("  " + Arrays.deepToString(r1));  
84.        out.println("2.Test QueryRunner query, ArrayListHandler");  
85.        //把ResultSet包装成List<Object[]>  
86.        List<Object[]> r2 = runner.query(sql, new ArrayListHandler(), "user%");  
87.        out.println("  " + Arrays.deepToString(r2.toArray()));  
88.        out.println("3.Test QueryRunner query, BeanHandler");  
89.        //把ResultSet第一行包装成一个JavaBean  
90.        User r3 = runner.query(sql, new BeanHandler<User>(User.class), "user%");  
91.        out.println("  " + r3.toString());  
92.        out.println("4.Test QueryRunner query, BeanListHandler");  
93.        //把ResultSet第一行包装成一个List<JavaBean>；  
94.        List<User> r4 = runner.query(sql, new BeanListHandler<User>(User.class), "user%");  
95.        out.println("  " + Arrays.deepToString(r4.toArray()));  
96.        out.println("5.Test query, ColumnListHandler");  
97.        //抽取ResultSet指定的列，以List<Object>对象的形式返回，默认第一列  
98.        List<Object> r5 = runner.query(sql, new ColumnListHandler(2), "user%");  
99.        out.println("  " + Arrays.deepToString(r5.toArray()));  
100.        out.println("6.Test QueryRunner query, KeyedHandler");  
101.        //包装ResultSet，以Map<Object,Map<String,Object>>对象形式返回，第一个Object是指定的列值，第二个Map中String是列名且对大小写不敏感  
102.        Map<Object, Map<String, Object>> r6 = runner.query(sql, new KeyedHandler(2), "user%");  
103.        out.println("  " + r6.toString());  
104.        out.println("7.Test QueryRunner query, MapHandler");  
105.        //把ResultSet第一行包装成Map<String, Object>，key对大小写不敏感  
106.        Map<String, Object> r7 = runner.query(sql, new MapHandler(), "user%");  
107.        out.println("  " + r7.toString());  
108.        out.println("8.Test QueryRunner query, MapListHandler");  
109.        //把ResultSet包装成List<Map<String,Object>>>，Map的key对大小写不敏感  
110.        List<Map<String, Object>> r8 = runner.query(sql, new MapListHandler(), "user%");  
111.        out.println("  " + r8.toString());  
112.        out.println("9.Test QueryRunner query, ScalarHandler");  
113.        //抽取ResultSet第一行指定列，以Object对象形式返回  
114.        Object r9 = runner.query(sql, new ScalarHandler("passwordhash"), "user%");  
115.        out.println("  " + r9.toString());  
116.    }  
117.    private void update() {  
118.        String sql = "DELETE FROM user WHERE PASSWORDHASH LIKE ?";  
119.        try {  
120.            out.println("/n" + StringUtils.center("Test QueryRunner update", 80, '*'));  
121.            out.println(runner.update(sql, "pwd%"));  
122.        } catch (SQLException ex) {  
123.            DbUtils.printStackTrace(ex);  
124.        }  
125.    }  
126.}  

 


 
 
 
 

来自：喵喵酱的图书馆 > 《DButils》 




 






上一篇：[Apache commons系列]DBUtils简介二 
 

Dbutils详解 
收藏人：喵喵酱的图书馆  
2014-08-20 | 阅：31  转：1

    
 |   来源 
 
   |  分享 
Common Dbutils是操作数据库的组件，对传统操作数据库的类进行二次封装，可以把结果集转化成List。


DBUtils包括3个包：
org.apache.commons.dbutils 
org.apache.commons.dbutils.handlers 
org.apache.commons.dbutils.wrappers
DBUtils封装了对JDBC的操作，简化了JDBC操作，可以少写代码。
 
org.apache.commons.dbutils
DbUtils 关闭链接等操作
QueryRunner 进行查询的操作
 
org.apache.commons.dbutils.handlers
ArrayHandler ：将ResultSet中第一行的数据转化成对象数组
ArrayListHandler将ResultSet中所有的数据转化成List，List中存放的是Object[]
BeanHandler ：将ResultSet中第一行的数据转化成类对象
BeanListHandler ：将ResultSet中所有的数据转化成List，List中存放的是类对象
ColumnListHandler ：将ResultSet中某一列的数据存成List，List中存放的是Object对象
KeyedHandler ：将ResultSet中存成映射，key为某一列对应为Map。Map中存放的是数据
MapHandler ：将ResultSet中第一行的数据存成Map映射
MapListHandler ：将ResultSet中所有的数据存成List。List中存放的是Map
ScalarHandler ：将ResultSet中一条记录的其中某一列的数据存成Object
 
org.apache.commons.dbutils.wrappers
SqlNullCheckedResultSet ：对ResultSet进行操作，改版里面的值
StringTrimmedResultSet ：去除ResultSet中中字段的左右空格。Trim()
 

主要方法：

 

DbUtils类：启动类

ResultSetHandler接口：转换类型接口

MapListHandler类：实现类，把记录转化成List

BeanListHandler类：实现类，把记录转化成List，使记录为JavaBean类型的对象

Qrery Runner类：执行SQL语句的类

 

建立三个Java文件

命名为BeanListExample.java

Guestbook.java

MapListExample.java
 

源码：

BeanListExample.java

 

Code
package com.sy;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanListHandler;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;

public class BeanListExample {
    public static void main(String[] args) {
        Connection conn = null;
        String url = "jdbc:mysql://localhost:3306/people";
        String jdbcDriver = "com.mysql.jdbc.Driver";
        String user = "root";
        String password = "hicc";

        DbUtils.loadDriver(jdbcDriver);
        try {
            conn = DriverManager.getConnection(url, user, password);
            QueryRunner qr = new QueryRunner();
            List results = (List) qr.query(conn, "select id,name from guestbook", new BeanListHandler(Guestbook.class));
            for (int i = 0; i < results.size(); i++) {
                Guestbook gb = (Guestbook) results.get(i);
                System.out.println("id:" + gb.getId() + ",name:" + gb.getName());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtils.closeQuietly(conn);
        }
    }
}
 

Guestbook.java

 

 

Code
package com.sy;

public class Guestbook {
    private Integer id;
    private String name;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}
 

MapListExample.java

 

Code
package com.sy;

import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.MapListHandler;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import java.util.List;
import java.util.Map;

public class MapListExample {
    public static void main(String[] args) {
        Connection conn = null;
        String url = "jdbc:mysql://localhost:3306/people";
        String jdbcDriver = "com.mysql.jdbc.Driver";
        String user = "root";
        String password = "hicc";

        DbUtils.loadDriver(jdbcDriver);
        try {
            conn = DriverManager.getConnection(url, user, password);
            QueryRunner qr = new QueryRunner();
            List results = (List) qr.query(conn, "select id,name from guestmessage", new MapListHandler());
            for (int i = 0; i < results.size(); i++) {
                Map map = (Map) results.get(i);
                System.out.println("id:" + map.get("id") + ",name:" + map.get("name"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DbUtils.closeQuietly(conn);
        }
    }
}
 

使用组建好需要添加commons-dbutils-1.1.jar和mysql-connector-java-5.1.6-bin.jar两个jar包。

 

配置完毕！！！

 //另一种方法
//使用dbutils1.0版本

import java.util.*;
import java.util.logging.*;
import java.sql.*;
import org.apache.commons.dbutils.*;
import org.apache.commons.dbutils.handlers.*;

public class TestDBUnits {
 
 public static void main(String[]args) throws Exception {
  TestDBUnits test = new TestDBUnits();
  
  for(int i = 0 ; i < 1 ; i++) {   
   test.testQuery1();
   test.testQuery2();
   test.testUpdate();
  }
 }
 
 public void testQuery1(){
  try {
   QueryRunner qr = new QueryRunner() ;
   ResultSetHandler rsh = new ArrayListHandler();   
   String strsql = "select * from test1";   
   ArrayList result = (ArrayList)qr.query(getConnection() ,strsql ,rsh);
   //System.out.print("");
  } catch(Exception ex) {
   ex.printStackTrace(System.out);
  }
 }
 
 public void testQuery2(){
  try {
   QueryRunner qr = new QueryRunner() ;
   ResultSetHandler rsh = new MapListHandler();   
   String strsql = "select * from test1";   
   ArrayList result = (ArrayList)qr.query(getConnection() ,strsql ,rsh);
   for(int i = 0 ; i < result.size() ; i++) {
    Map map = (Map)result.get(i);
    //System.out.println(map);    
   }
   //System.out.print("");
  } catch(Exception ex) {
   ex.printStackTrace(System.out);
  }
 }
 
 public void testUpdate(){
  try {
   QueryRunner qr = new QueryRunner() ;
   ResultSetHandler rsh = new ArrayListHandler();
   String strsql = "insert test1(page ,writable ,content)values('ttt','ttt','faskldfjklasdjklfjasdklj')";
   qr.update(getConnection() ,strsql);
   //System.out.print("");
  } catch(Exception ex) {
   ex.printStackTrace(System.out);
  }
 }
 
 private  Connection getConnection() throws InstantiationException,
   IllegalAccessException, ClassNotFoundException, SQLException {
  
  String strDriver = "org.gjt.mm.mysql.Driver";
  String strUrl = "jdbc:mysql://localhost:3306/test";
  String strUser = "root";
  String strPass = "";
   
  Class.forName(strDriver).newInstance();  
  return DriverManager.getConnection(strUrl, strUser, strPass);
 }
}

来自：喵喵酱的图书馆 > 《DButils》  
 
